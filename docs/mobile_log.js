// Generated by Haxe 4.1.5
(function ($global) { "use strict";
class Main {
	constructor() {
		this.DEBUG = true;
		let _gthis = this;
		window.document.addEventListener("DOMContentLoaded",function(event) {
			if(_gthis.DEBUG) {
				console.log("src/Main.hx:23:","x");
			}
			return _gthis.init();
		});
		this.output("hi");
		haxe_Timer.delay(function() {
			_gthis.output("test " + 0 + " in " + 0 + "ms");
		},0);
		haxe_Timer.delay(function() {
			_gthis.output("test " + 1 + " in " + 1000 + "ms");
		},1000);
		haxe_Timer.delay(function() {
			_gthis.output("test " + 2 + " in " + 2000 + "ms");
		},2000);
		haxe_Timer.delay(function() {
			_gthis.output("test " + 3 + " in " + 3000 + "ms");
		},3000);
		haxe_Timer.delay(function() {
			_gthis.output("test " + 4 + " in " + 4000 + "ms");
		},4000);
		haxe_Timer.delay(function() {
			_gthis.output("test " + 5 + " in " + 5000 + "ms");
		},5000);
		haxe_Timer.delay(function() {
			_gthis.output("test " + 6 + " in " + 6000 + "ms");
		},6000);
		haxe_Timer.delay(function() {
			_gthis.output("test " + 7 + " in " + 7000 + "ms");
		},7000);
		haxe_Timer.delay(function() {
			_gthis.output("test " + 8 + " in " + 8000 + "ms");
		},8000);
		haxe_Timer.delay(function() {
			_gthis.output("test " + 9 + " in " + 9000 + "ms");
		},9000);
		this.highjack();
		$global.console.log("log");
		$global.console.warn("warn");
		$global.console.error("error");
		$global.console.info("info");
	}
	highjack() {
		var old = console.log;
		var logger = document.getElementById('debugDiv');
		console.log = function(message) {
			if (typeof message == 'object') {
				logger.innerHTML += (JSON && JSON.stringify ? JSON.stringify(message) : message) + '<br />';
			} else {
				logger.innerHTML += message + '**<br />';

				$bind(this,this.output)( message);

			}
		} ;
	}
	init() {
		let _id = "debugDiv";
		let div = window.document.getElementById(_id);
		if(window.document.getElementById(_id) == null) {
			div = window.document.createElement("div");
			div.id = _id;
			div.setAttribute("style","font-family: 'Courier New', Courier, monospace;padding: 10px; height: 200px; width: 100%; border: 1px solid #333; overflow:scroll;position: fixed;bottom: 0; color: white; background-color: rgba(0,0,0,0.5)");
			window.document.body.appendChild(div);
		}
		return div;
	}
	output(message) {
		let div = this.init();
		let d = new Date();
		let time = d.getHours() + ":" + d.getMinutes() + ":" + d.getSeconds() + " - ";
		let txt = div.innerText;
		div.innerText = time + message + "\n" + txt;
	}
	static main() {
		let app = new Main();
	}
}
class haxe_Timer {
	constructor(time_ms) {
		let me = this;
		this.id = setInterval(function() {
			me.run();
		},time_ms);
	}
	stop() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	run() {
	}
	static delay(f,time_ms) {
		let t = new haxe_Timer(time_ms);
		t.run = function() {
			t.stop();
			f();
		};
		return t;
	}
}
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
