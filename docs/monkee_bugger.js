// Generated by Haxe 4.1.5
(function ($global) { "use strict";
class MonkeeBugger {
	constructor() {
		this.DEBUG = true;
		if(this.DEBUG) {
			$global.console.log("[monkee]" + " - MonkeeBugger - " + "2021-04-16 15:39:08");
		}
		let _gthis = this;
		window.document.addEventListener("DOMContentLoaded",function(event) {
			_gthis.init();
			_gthis.highjack();
		});
	}
	highjack() {
		let _log = ($_=$global.console,$bind($_,$_.log));
		let _warn = ($_=$global.console,$bind($_,$_.warn));
		let _info = ($_=$global.console,$bind($_,$_.info));
		let _error = ($_=$global.console,$bind($_,$_.error));
		let _gthis = this;
		$global.console.log = function(msg) {
			_log(msg);
			_gthis.output("" + msg);
		};
		$global.console.warn = function(msg) {
			_warn(msg);
			_gthis.output("" + msg,"warn");
		};
		$global.console.error = function(msg) {
			_error(msg);
			_gthis.output("" + msg,"error");
		};
		$global.console.info = function(msg) {
			_info(msg);
			_gthis.output("" + msg,"info");
		};
		window.onerror = function(message,url,linenumber,i,b) {
			$global.console.log("JavaScript error: " + message + " on line " + linenumber + " for " + url);
			return { };
		};
	}
	init() {
		let _id = "debugDiv";
		let div = window.document.getElementById(_id);
		if(window.document.getElementById(_id) == null) {
			div = window.document.createElement("div");
			div.id = _id;
			div.setAttribute("style","@import url('https://fonts.googleapis.com/css2?family=Roboto+Mono&display=swap'); font-family: 'Roboto Mono','Courier New', Courier, monospace;padding: 10px; height: 200px; width: 100%; border: 1px solid #333; overflow:scroll;position: fixed;bottom: 0; color: white; background-color: rgba(0,0,0,0.5)");
			window.document.body.appendChild(div);
		}
		return div;
	}
	output(message,type) {
		if(type == null) {
			type = "log";
		}
		let style = "color:gray";
		switch(type) {
		case "error":
			style = "background-color:#FF3769; color:white;";
			break;
		case "info":
			style = "color:black";
			break;
		case "log":
			style = "color:white";
			break;
		case "warn":
			style = "background-color:#D8B700; color:white;";
			break;
		default:
			style = "color:black";
		}
		let div = this.init();
		let d = new Date();
		let time = StringTools.lpad("" + d.getHours(),"0",2) + ":" + StringTools.lpad("" + d.getMinutes(),"0",2) + ":" + StringTools.lpad("" + d.getSeconds(),"0",2) + " - ";
		let txt = div.innerHTML;
		div.innerHTML = "<div style=\"border-top:1px solid RGBA(0,0,0,0.3);" + style + "\"><span>" + time + " " + message + "</span></div>" + txt;
	}
	static main() {
		let app = new MonkeeBugger();
	}
}
class StringTools {
	static lpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		let buf_b = "";
		l -= s.length;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		buf_b += s == null ? "null" : "" + s;
		return buf_b;
	}
}
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
MonkeeBugger.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
